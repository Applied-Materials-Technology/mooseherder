'''
==============================================================================
TEST: gmsh Runner

Authors: Lloyd Fletcher
==============================================================================
'''
import os
from pathlib import Path
import pytest
from mooseherder.gmshrunner import GmshRunner

USER_DIR = Path.home()


def test_gmsh_exists():
    exist_gmsh_path = USER_DIR / 'moose-workdir/gmsh/bin/gmsh'
    assert exist_gmsh_path.is_file()


@pytest.fixture()
def gmsh_path() -> Path:
    return USER_DIR / 'moose-workdir/gmsh/bin/gmsh'


@pytest.fixture()
def runner(gmsh_path: Path) -> GmshRunner:
    return GmshRunner(gmsh_path)


@pytest.fixture()
def input_file() -> Path:
    return Path('tests/gmsh/gmsh-test.geo')


@pytest.fixture(autouse=True)
def setup_teardown():
    # Setup here
    yield
    # Teardown here - remove output files
    all_files = os.listdir('tests/gmsh/')
    for ff in all_files:
        if '.msh' in ff:
            os.remove(Path('tests/gmsh/' + ff))

def test_create_runner(runner: GmshRunner, gmsh_path: Path) -> None:
    assert runner._gmsh_app == gmsh_path


def test_create_runner_err() -> None:
    wrong_path = USER_DIR / 'wrong_dir'
    with pytest.raises(FileNotFoundError) as err_info:
        _ = GmshRunner(wrong_path)

    msg, = err_info.value.args
    assert msg == 'Gmsh app not found at given path.'

def test_set_gmsh_app(gmsh_path: Path) -> None:
    check_runner = GmshRunner()
    check_runner.set_gmsh_app(gmsh_path)
    assert check_runner._gmsh_app == gmsh_path


def test_set_gmsh_app_err() -> None:
    wrong_path = USER_DIR / 'wrong_dir'
    with pytest.raises(FileNotFoundError) as err_info:
        check_runner = GmshRunner()
        check_runner.set_gmsh_app(wrong_path)

    msg, = err_info.value.args
    assert msg == 'Gmsh app not found at given path.'


def test_set_input_file(runner: GmshRunner, input_file: Path) -> None:
    runner.set_input_file(input_file)
    assert runner._input_file == input_file


def test_set_input_err_geo(runner: GmshRunner) -> None:
    wrong_file = Path('tests/gmsh/gmsh-test.i')
    with pytest.raises(FileNotFoundError) as err_info:
        runner.set_input_file(wrong_file)
    msg, = err_info.value.args
    assert msg == 'Incorrect file type. Must be *.geo.'


def test_set_input_err_exist(runner: GmshRunner) -> None:
    wrong_file = Path('tests/gmsh/gmsh-test-noexist.geo')
    with pytest.raises(FileNotFoundError) as err_info:
        runner.set_input_file(wrong_file)
    msg, = err_info.value.args
    assert msg == 'Specified gmsh geo file does not exist.'


def test_run(runner: GmshRunner, input_file: Path) -> None:
    runner.set_input_file(input_file)
    runner.run()
    assert os.path.isfile('tests/gmsh/gmsh-test.msh'), 'Output mesh *.msh file not generated by gmsh.'


def test_run_with_input(runner: GmshRunner, input_file: Path) -> None:
    runner.run(input_file)
    assert os.path.isfile('tests/gmsh/gmsh-test.msh'), 'Output mesh *.msh file not generated by gmsh.'


def test_run_err_no_gmsh() -> None:
    check_runner = GmshRunner()
    with pytest.raises(RuntimeError) as err_info:
        check_runner.run()
    msg, = err_info.value.args
    assert msg == "Specify the full path to the gmsh app before calling run."


def test_run_err_no_geo(runner: GmshRunner) -> None:
    with pytest.raises(RuntimeError) as err_info:
        runner.run()
    msg, = err_info.value.args
    assert msg == "Specify input *.geo file before running gmsh."
